//https://leetcode.com/problems/sort-an-array/

//used merge sort here

class Solution {
    public int[] sortArray(int[] nums) {
        return mergeSort(nums);
    }
    
    static int[] mergeSort(int[] nums){
        if(nums.length == 1) //base condition
            return nums;
        
        int mid = nums.length/2; 
        
        
        //dividing arrays into two halfs
        int[] left = mergeSort(Arrays.copyOfRange(nums, 0, mid)); 
        int[] right = mergeSort(Arrays.copyOfRange(nums, mid, nums.length));
        
        
        //merging them in
        return merge(left, right);
    }
    
    static int[] merge(int[] first, int[] second){
        int i = 0;
        int j = 0;
        int k = 0;
        
        int ans[] = new int[first.length + second.length];
        
        while(i < first.length && j < second.length){
            
            if(first[i] < second[j]){
                ans[k] = first[i];
                i++;
            }else{
                ans[k] = second[j];
                j++;
            }
            k++;
        }
        
        while(i < first.length){
            ans[k] = first[i];
            i++;
            k++;
        }
        
        while(j < second.length){
            ans[k] = second[j];
            j++;
            k++;
        }
        return ans;
    }
}