//https://leetcode.com/problems/unique-paths/

class Solution {
    public int uniquePaths(int m, int n) {
        // ArrayList<String> ans = getMaze(1, 1, m, n);
        // return ans.size();
        return maze(m, n);
    }
    
//     public ArrayList<String> getMaze(int sr, int sc, int dr, int dc){
        
//         if(sr == dr && sc == dc){
//             ArrayList<String> base = new ArrayList<>();
//             base.add("");
//             return base;
//         }
        
        
//         ArrayList<String> hpaths = new ArrayList<>();
//         ArrayList<String> vpaths = new ArrayList<>();
        
//         if(sc < dc){
//             hpaths = getMaze(sr, sc+1, dr, dc);
//         }
        
//         if(sr < dr){
//             vpaths = getMaze(sr+1, sc, dr, dc);
//         }
        
//         ArrayList<String> ans = new ArrayList<>();
//         for(String hpath: hpaths){
//             ans.add("h" + hpath);
//         }
        
//         for(String vpath: vpaths){
//             ans.add("v" + vpath);
//         }
        
//         return ans;
//     }
    
    public int maze(int m, int n){
        int[][] dp = new int[m+1][n+1];
        
        for(int i = 0 ; i <= m ; i++){
            for(int j = 0 ; j <= n ; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 1;
                }
            }
        }
        
        
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
}