//https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1/#

// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GfG {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            String s = sc.next();
            int k = sc.nextInt();
            Solution obj = new Solution();
            System.out.println(obj.longestkSubstr(s, k));
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solution {
    public int longestkSubstr(String s, int k) {
        int ans = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int i = -1;
        int j = -1;
        
        while(true){
            boolean f1 = false;
            boolean f2 = false;
            
            //aquire
            while(i < s.length() - 1){
                f1 = true;
                i++;
                char ch = s.charAt(i);
                
                map.put(ch, map.getOrDefault(ch, 0) + 1);
                
                if(map.size() == k){
                    ans = Math.max(ans, i-j);
                }else if(map.size() > k){
                    break;
                }
            }
            
            //release
            while(j < i){
                f2 = true;
                j++;
                char ch = s.charAt(j);
                
                if(map.get(ch) == 1){
                    map.remove(ch);
                    if(map.size() == k){
                        ans = Math.max(ans, i-j);
                        break;
                    }
                }else{
                    map.put(ch, map.get(ch) - 1);
                }
            }
            if(f1 == false && f2 == false){
                break;
            }
        }
        
        if(ans == 0){
            return -1;
        }
        
        return ans;
    }
}