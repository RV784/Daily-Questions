https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

class Solution {
    public int maxProfit(int[] prices) {
        
        int n = prices.length;
        
        int mpist = 0;
        int leastsf = prices[0];
        int[] dp1 = new int[n+1];
        
        for(int i = 1 ; i < n ; i++){
            if(prices[i] < leastsf){
                leastsf = prices[i];
            }
            
            mpist = prices[i] - leastsf;
            if(mpist > dp1[i-1]){
                dp1[i] = mpist;
            }else{
                dp1[i] = dp1[i-1];
            }
        }
        
        int mpibt = 0;
        int maxat = prices[n-1];
        int[] dp2 = new int[n];
        
        for(int i = n-2 ; i >= 0 ; i--){
            
            if(prices[i] > maxat){
                maxat = prices[i];
            }
            
            mpibt = maxat - prices[i];
            if(mpibt > dp2[i+1]){
                dp2[i] = mpibt;
            }else{
                dp2[i] = dp2[i+1];
            }
        }
        
        int ans = 0;
        for(int i = 0 ; i < n ; i++){
            ans = Math.max(dp1[i] + dp2[i], ans);
        }
        
        return ans;
    }
}