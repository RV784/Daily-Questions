

//https://practice.geeksforgeeks.org/problems/partition-array-to-k-subsets/1/#

// { Driver Code Starts
import java.util.*;

class Partition_Arr_To_K_Subsets
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t>0)
		{
			int n = sc.nextInt();
			int a[] = new int[n];
			for(int i=0;i<n;i++)
				a[i] = sc.nextInt();
			int k = sc.nextInt();
			Solution g = new Solution();
			if(g.isKPartitionPossible(a,n,k)==true)
				System.out.println(1);
			else 
				System.out.println(0);
			
		t--;
		}
	}
}// } Driver Code Ends


/*You are required to complete this method */

class Solution
{
    public boolean fans = false;
    public boolean isKPartitionPossible(int a[], int n, int k)
    {
	// Your code here	
	 int sum = 0;
         if(k > n){
             return false;
         }
         
         if(k == 1){
             return true;
         }
         
         for(int val : a){
             sum += val;
         }
         
         if(sum % k != 0){
             return false;
         }
         
        int[] subsetSum = new int[k];
		ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
		for(int i = 0; i < k; i++) {
			ans.add(new ArrayList<>());
		}
		
// 		boolean fans = false;
		solution(a,0,n,k,subsetSum,0,ans);
		return fans;
    }
    
    public void solution(int[] arr, int vidx,int n , int k,int[] subsetSum,int ssssf, ArrayList<ArrayList<Integer>> ans) {
		//write your code here
		if(vidx == arr.length){
		    if(ssssf == k){
		        boolean flag = true;
		        for(int i = 0 ; i < subsetSum.length-1 ; i++){
		            if(subsetSum[i] != subsetSum[i+1]){
		                flag = false;
		                break;
		            }
		        }
		        if(flag){
		            fans = true;
		        }
		    }
		    return;
		}
		
		
		for(int i = 0 ; i < ans.size() ; i++){
		    
		    if(ans.get(i).size() > 0){
		        subsetSum[i] += arr[vidx];
		        ans.get(i).add(arr[vidx]);
		        solution(arr, vidx+1, n, k, subsetSum, ssssf, ans);
		        subsetSum[i] -= arr[vidx];
		        ans.get(i).remove(ans.get(i).size() - 1);
		    }else{
		        subsetSum[i] += arr[vidx];
		        ans.get(i).add(arr[vidx]);
		        solution(arr, vidx+1, n, k, subsetSum, ssssf+1, ans);
		        subsetSum[i] -= arr[vidx];
		        ans.get(i).remove(ans.get(i).size() - 1);
		        break;
		    }
		}
	}
}
