//https://leetcode.com/problems/contiguous-array/

class Solution {
    public int findMaxLength(int[] nums) {
        int[] arr = new int[nums.length];
        for(int i = 0 ; i < nums.length ; i++){
            if(nums[i] == 0){
                arr[i] = -1;
            }else{
                arr[i] = 1;
            }
        }
        
        //largest subarray with 0 sum
        
//         HashMap<Integer, Integer> map = new HashMap<>();
//         map.put(0, -1);
//         int sum = 0;
//         int len = 0;
//         int i = -1;
        
//         while(i < nums.length - 1){
//             i++;
            
//             sum+=nums[i];
            
//             if(map.containsKey(sum) == false){
//                 map.put(sum, i);
//             }else{
//                 int prevIdx = map.get(sum);
//                 len = Math.max(len, i-prevIdx);
//             }
//         }
        
//         return len+1;
        int n = arr.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int i = -1;
        int len = 0;
        int sum = 0;
        while(i < n-1){
            i++;
            
            sum += arr[i];
            
            if(map.containsKey(sum) == false){
                map.put(sum, i);
            }else{
                int previdx = map.get(sum);
                len = Math.max(len, i-previdx);
            }
        }
        return len;
    }
}