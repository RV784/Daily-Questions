//https://nados.io/question/count-of-substrings-with-exactly-k-unique-characters?zen=true

import java.util.*;

public class Main {

	public static int solution(String str, int k){

		if(k == 1){
			int ans = 0;
			HashMap<Character, Integer> map = new HashMap<>();

			int i = -1;
			int j = -1;
			while(true){
				boolean f1 = false;
				boolean f2 = false;

				//aquire
				while(i < str.length() - 1){
					f1 = true;
					i++;

					char ch = str.charAt(i);

					map.put(ch, map.getOrDefault(ch, 0) + 1);

					if(map.size() > 1){
						i--;
						map.remove(ch);
						// ans += i-j;
						break;
					}
				}

				while(j < i){
					f2 = true;
					if(map.size() == 1){
						ans += i - j;
					}
					j++;
					char ch = str.charAt(j);


					if(map.get(ch) == 1){
						map.remove(ch);
					}else{
						map.put(ch, map.get(ch) - 1);
					}

					if(map.size() == 0){
						break;
					}
				}


				if(f1 == false && f2 == false){
					break;
				}
			}
			return ans;
		}



		int ans = 0;
		HashMap<Character, Integer> map1 = new HashMap<>();
		HashMap<Character, Integer> map2 = new HashMap<>();

		int i1 = -1;
		int i2 = -1;
		int j = -1;

		while(true){

			boolean f1 = false;
			boolean f2 = false;
			boolean f3 = false;
			boolean f4 = true;

			//aquire map2
			while(i2 < str.length() - 1){
				f2 = true;
				i2++;
				char ch = str.charAt(i2);

				map2.put(ch, map2.getOrDefault(ch, 0) + 1);
				if(map2.size() > k){
					map2.remove(ch);
					i2--;
					// if(map1.size() == k-1 && f4){

					// 	ans+= i2-i1;
					// }
					break;
				}
			}

			//aquire map1
			while(i1 < i2){
				f1 = true;
				i1++;
				char ch = str.charAt(i1);

				map1.put(ch, map1.getOrDefault(ch, 0) + 1);
				if(map1.size() > k-1){
					map1.remove(ch);
					i1--;
					// if(map2.size() == k){
					// 	ans += i2 - i1;
					// 	f4 = false;
					// }
					break;
				}
			}

			//release
			while(map1.size() == k-1 && map2.size() == k && j < i1){
				f3 = true;
				if(map1.size() == k-1 && map2.size() == k){
					ans += i2 - i1;
				}
				j++;

				char ch = str.charAt(j);
				

				if(map1.get(ch) == 1){
					map1.remove(ch);
				}else{
					map1.put(ch, map1.get(ch) - 1);
				}

				if(map2.get(ch) == 1){
					map2.remove(ch);
				}else{
					map2.put(ch, map2.get(ch) - 1);
				}

				if(map1.size() != k-1 || map2.size() != k){
					break;
				}else{
					// ans += i2 - i1;
				}
			}
			if(f1 == false && f2 == false && f3 == false){
				break;
			}
		}


		return ans;
	}
	
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
        String str = scn.next();
        int k = scn.nextInt();
		System.out.println(solution(str,k));
	}

}
