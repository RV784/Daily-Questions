//https://practice.geeksforgeeks.org/problems/find-all-four-sum-numbers1732/1#

// { Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());

        while (tc-- > 0) {
            String[] nk = br.readLine().trim().split(" ");
            int n = Integer.parseInt(nk[0]);
            int k = Integer.parseInt(nk[1]);

            String[] str = br.readLine().trim().split(" ");
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(str[i]);
            }

            Solution sln = new Solution();
            ArrayList<ArrayList<Integer>> ans = sln.fourSum(a, k);
            for (ArrayList<Integer> v : ans) {
                for (int u : v) {
                    System.out.print(u + " ");
                }
                System.out.print("$");
            }
            if (ans.isEmpty()) {
                System.out.print(-1);
            }
            System.out.println();
        }
    }
}// } Driver Code Ends


// User function Template for Java

// arr[] : int input array of integers
// k : the quadruple sum required

class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] nums, int target)  {
		Arrays.sort(nums);
		ArrayList<ArrayList<Integer>>  res = new ArrayList<>();
		int s = 0;
		int e = nums.length-1;
		for(int i = s ; i <= e ; i++){
			if(i != s && nums[i] == nums[i-1]){
				continue;
			}

			ArrayList<ArrayList<Integer>> smolAns = threeSum(nums, target - nums[i], i+1, e);
			createResult(res, smolAns, nums[i]);
		}
			return res;
	}
	
	public ArrayList<ArrayList<Integer>> threeSum(int[] nums, int target, int s, int e){
		ArrayList<ArrayList<Integer>>  res = new ArrayList<>();

		for(int i = s ; i <= e ; i++){
			if(i != s && nums[i] == nums[i-1]){
				continue;
			}

			ArrayList<ArrayList<Integer>> smolAns = twoSum(nums, target - nums[i], i+1, e);
			createResult(res, smolAns, nums[i]);
		}
		return res;
	}
	
	public ArrayList<ArrayList<Integer>> twoSum(int[] nums, int target, int s, int e){

		ArrayList<ArrayList<Integer>> res = new ArrayList<>();
		while(s < e){
			int t = nums[s] + nums[e];
			if(t == target){
				res.add(new ArrayList(Arrays.asList(nums[s], nums[e])));
				s++;
				e--;
				while(s < e && nums[s] == nums[s-1]) s++;
				while(s < e && nums[e] == nums[e+1]) e--;
			}else if(t < target){
				s++;
			}else{
				e--;
			}
		}

		return res;
	}
	
	public void createResult(ArrayList<ArrayList<Integer>> res, ArrayList<ArrayList<Integer>> smolAns, int val){
		for(ArrayList<Integer> sa : smolAns){
			sa.add(0, val);
			res.add(sa);
		}
	}
}