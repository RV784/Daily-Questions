//divide the array into two parts
//Get both parts sorted via recursion
//Merge the sorted parts

package com.company;
import java.util.*;

public class Main{
    public static void main(String[] args){

    }

    static int[] mergeSort(int[] arr){
        if(arr.length == 1){
            return arr;
        }

        int mid = arr.length / 2;

        int[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid));
        int[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length));

        return merge(left, right);
    }

    static int[] merge(int[] first, int[] second){
        int[] mix = new int[first.length + second.length];

        int i = 0;
        int j = 0;
        int k = 0;

        while(i < first.length && j < second.length){
            if(first[i] < second[i]){
                mix[k] = first[i];
                i++;
            }else{
                mix[k] = second[j];
                j++;
            }
            k++;
        }

         //it may be possible if both arrays are of not same size, then just add the remaining array to the mi

            while(i < first.length){
                mix[k] = first[i];
                i++;
                k++;
            }

            while(j < second.length){
                mix[k] = second[j];
                j++;
                k++;
            }

            return mix;
    }
}